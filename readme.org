#+TITLE: Tennis Ball Collector

This is the repository used for the discipline of Ingènierie Système and robotic modeling at ENSTA Bretagne in 2021. Here, we create a robot capable cleaning the balls that appear in a tennis court, placing them in the designated places.

* Launch the simulation

** Requirements
In order to run the simulation, you'll need to install the following dependencies:
- [[https://pypi.org/project/imutils/][imutils]]
- [[https://pypi.org/project/transform3d/][transform3d]]

** Run the simulation
The execution works in two multiple separate parts.


The compilation and setup of the modules can be done as follows
#+begin_src bash :tangle no :export code :results silent
# build packages
colcon build --symlink-install

# load variables
. install/setup.sh
#+end_src

First we launch the simulation world in Gazebo. The robot is spawned in a node with its description and then the mission is launched.

#+begin_src bash :tangle no :export code :results silent
# launch the simulation world
ros2 launch tennis_court tennis_court.launch.py

# launch the robot model
ros2 launch robot_description display.launch.py

# launch the top camera node
ros2 run robot_command camera_top

# launch the control node
ros2 run robot_command command

# launch the waypoint node
ros2 run robot_command waypoint
#+end_src

** State representation
The execution of the algorithm implements the following behavior for dealing with the balls.
#+attr_html: :width 700
[[file:docs/states.png]]

* Modules
** Robot description
The package =robot_description= describes the robot and all its sensors.

- Plugins ::
  - =libgazebo_ros_diff_drive.so= : for wheel motion

- Publishers ::
  - =/cmd_vel= : Twist

** Top camera
Runs as =camera_top= node. This node publishes the positions and identifications for all balls with information of the camera.

- Subscribers ::
  - =/zenith_camera/image_raw= : Image

- Publishers ::
  - =/balls= : Float64MultiArray

** Waypoint generation
Runs as =waypoint_gen= node. Node responsible for the generation of a waypoint for the robot at each instant, based on the last known position of the balls.

- Subscribers ::
  - =/balls= : Float64MultiArray

- Publishers ::
  - =/waypoint= : Pose

** Control node
Run as =command= node. It takes as input the position of the target and it computes the action necessary to go to it.

- Subscribers ::
  - =/waypoint= : Pose
  - =/robot_state= : Pose

- Publishers ::

* Group
** Members
Yves Jordan NJAMEN, Stéphane NGNEPIEPAYE WEMBE, Bernardo HUMMES FLORES, Yohann GOURRET, Katell LAGATTU

** Project Management
The project in Taiga can be found [[https://tree.taiga.io/project/birromer-1-tennis-ball-collector/timeline][here]].

* Repository structure
This repository must be cloned inside the =src= directory of a ROS2 workspace.

** =tennis_court= package
The folder =tennis_court= is a ROS package containing the world in which the ball cleaning ball.

Le dossier `tennis_court` est un package ROS contenant le monde dans lequel le robot ramasseur de balle devra évoluer ainsi qu'un script permettant de faire apparaître des balles dans la simulation.
Ce package ne doit pas être modifié.
Consulter le [README](tennis_court/README.md) du package pour plus d'informations.

** =robot_description= package

The `robot_description` directory is a ROS package that contains the description of the robot. This package allows to describe the different parts and joints of the robot in the file `/urdf/robot.urdf.xacro`. It also contains the definition of the robot's IMU. 

** =robot_command= package
The `robot_description` folder is an ROS package containing all the control scripts, here they are:
- the image processing that locates the robot and the balls.
- the robot control and the state machine.
- The waypoints for the robot path.

** Documents
The =docs= folder contains all of the useful documents for the project:
- [[docs/GitWorkflow.md][Instructions on how to use Git]]
- [[docs/Memo_ROS2.pdf][Reminders on how to use ROS2 and Gazebo]]
- [[docs/GitPresentation.pdf][Slides of the Git presentation]]

** Reports
The =reports= folder contains the notes taken for the meetings had at the beginning and end of each session. A template followed by the [[file:reports/sprint_template.org][sprint]] and [[file:reports/debrief_template.org][debriefing]] notes are found.
